import asyncio

from source.bot import *
from source.texts import *
from source.parser import *
from source.users import *
from aiogram import types


@dp.message_handler()
async def new_message(message: types.Message):
    id = message.from_user.id
    text = message.text

    print(id, text)
    print(message.from_user)
    if '/start' == text:
        if not users_get(id):
            if id == mainAdmin:
                users_add(id, 1, 1)
            else:
                users_add(id)
            await bot.send_message(
                mainAdmin,
                f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (`{id}`) @{message.from_user.username}',
                parse_mode='markdown'
            )

        update(id, 'forward_id', 0, 'users')

        await message.delete()
        await bot.send_message(id, start_text, reply_markup=right_keyboard(id))

    elif '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ üìä' == text:
        await message.delete()
        await bot.send_message(id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª', reply_markup=make_indicators_buttons(id))

    elif '–°–≤—è–∑–∞—Ç—å—Å—è üìû' == text:
        await message.delete()
        update(id, 'forward_id', -1, 'users')
        await bot.send_message(id, start_chatting, reply_markup=chat_keyboard)

    elif '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥‚òéÔ∏è' == text:
        await message.delete()

        forwardId = users_forward_id(id)
        try:
            if users_forward_id(forwardId) != id:
                raise ValueError

            update(forwardId, 'forward_id', 0, 'users')
            await bot.send_message(forwardId, '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥', reply_markup=right_keyboard(forwardId))
        except Exception as e:
            logging.error(str(e))

        update(id, 'forward_id', 0, 'users')
        await bot.send_message(id, '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º', reply_markup=right_keyboard(id))

    elif '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô' == text and users_is_admin(id):
        await bot.send_message(id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç', reply_markup=settings_buttons)

    elif text.startswith('/nick') and users_is_admin(id):
        if len(text.split()) == 3:
            userId, nickname = text.split()[1:]
            userId = users_get(userId)

            print(userId)
            if not userId:
                await bot.send_message(id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            else:
                update(userId['id'], 'nickname', nickname, 'users')

                userId = users_get(userId['id'])

                await bot.send_message(id, f'–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–æ–≥–∏–Ω: "{userId["nickname"]}"')
        else:
            await bot.send_message(id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')


    elif 'CSIüìä' == text and users_is_admin(id):
        answer = await calculate_csi()
        await bot.send_message(id, answer)

    elif id in change_client and users_is_admin(id):
        await message.delete()
        try:
            deviceId = int(text)
            flag = users_is_client(deviceId)
            if flag is None:
                raise ValueError
            txt = f'–ö–ª–∏–µ–Ω—Ç: {"‚úÖ" if flag else "‚ùå"}'
            await bot.send_message(id, txt, reply_markup=make_permissions_change_buttons(0, deviceId))
        except ValueError:
            await bot.send_message(id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É ID',
                                   reply_markup=back_to_settings_button)

    elif id in change_admin and users_is_admin(id):
        await message.delete()
        try:
            deviceId = int(text)
            flag = users_is_admin(deviceId)
            if flag is None:
                raise ValueError
            txt = f'–ê–¥–º–∏–Ω: {"‚úÖ" if flag else "‚ùå"}'
            await bot.send_message(id, txt, reply_markup=make_permissions_change_buttons(1, deviceId))
        except ValueError:
            await bot.send_message(id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É ID',
                                   reply_markup=back_to_settings_button)

    elif id in add_accountId and users_is_admin(id):
        await message.delete()
        if add_accountId[id][0] == -1:
            userId = text
            add_accountId[id][0] = userId
            await bot.send_message(id, f'–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}?',
                                   reply_markup=make_accountId_buttons(userId)
            )

    elif '/get_id' == text:
        await message.delete()
        old = await bot.send_message(id, f'–í–∞—à üÜî: `{id}`', parse_mode='markdown')
        await asyncio.sleep(15)
        await old.delete()

    elif '/start_send' == text:
        await message.delete()
        await send_first_questions()

    else:
        match users_forward_id(id):
            case 0:
                pass
            case -1:
                user_info = f'ID `{message.from_user.id}` @{message.from_user.username} '\
                            f'{message.from_user.first_name} {message.from_user.last_name}'
                await new_notification(id, text, user_info)
            case forwardId:
                text += f'\n {message.from_user.first_name} {message.from_user.last_name}'
                await bot.send_message(forwardId, text)
